/* Global Template Set-up */ 

// Background image mixin

@mixin apply-background-image($image, $extension:'.jpg', $retina:false, $width:null, $height:null ){
  
    @if $extension == '.svg'{
      background-image: url('/images/' + $image + $extension);
      background-image: url('/images/' + $image + $extension), none;
    } @else {
      background-image: url('/images/' + $image + $extension);
    }

    @if $retina{
      @media (min--moz-device-pixel-ratio: 1.3),
             (-o-min-device-pixel-ratio: 2.6/2),
             (-webkit-min-device-pixel-ratio: 1.3),
             (min-device-pixel-ratio: 1.3),
             (min-resolution: 1.3dppx) {
        background-image: url('/images/' + $image + '-2x' + $extension);
        background-size: $width $height;  }
    }

    background-repeat: no-repeat;
}

// Rhythm borders placeholder mixin
// Tip: %apply-rhythm-borders applies top $ bottom padding + border to selectors
// This allows us to globally size tabs, accordions, and form selectors, 
// while retaining vertical rhythm

%apply-rhythm-borders{
  @include rhythm-borders($default-border-width, 0.5);
}

// Gradient Overlay

.gradient-overlay{ position: relative; }

$starts-at: top;

$first-color: black;
$second-color: black;

$first-color-opacity: 0;
$second-color-opacity: 0.5;

$first-color-position: 50%;
$second-color-position: 100%;

.gradient-overlay::before {
  
  background-image: linear-gradient(
    $starts-at, 
    rgba( $first-color, $first-color-opacity ) $first-color-position, 
    rgba( $second-color, $second-color-opacity ) $second-color-position );
  background-image: -moz-linear-gradient( 
    $starts-at, 
    rgba( $first-color, $first-color-opacity ) $first-color-position, 
    rgba( $second-color, $second-color-opacity ) $second-color-position );
  background-image: -ms-linear-gradient( 
    $starts-at, 
    rgba( $first-color, $first-color-opacity ) $first-color-position, 
    rgba( $second-color, $second-color-opacity ) $second-color-position );
  background-image: -o-linear-gradient(
    $starts-at, 
    rgba( $first-color, $first-color-opacity ) $first-color-position, 
    rgba( $second-color, $second-color-opacity ) $second-color-position );
  background-image: -webkit-linear-gradient( 
    $starts-at, 
    rgba( $first-color, $first-color-opacity ) $first-color-position, 
    rgba( $second-color, $second-color-opacity ) $second-color-position );

  content: "\00a0";
  position: absolute;
  height: 100%;
  width: 100%;
  left:0;
  right: 0;
}

// Tip: @mixin apply-vertical-space and @mixin apply-horizontal-space are used to apply padding and margins to fundamental selectors that make up our templates

// Our @mixin apply-vertical-space applies vertical padding and margin to selectors
// Our @mixin apply-horizontal-space applies horizontal padding and margin to selectors

@mixin apply-vertical-space($val, $include-extras:false){

  // Set $include-extras:true to apply top & bottom padding to tabs, accordions, and form elements

  // Apply top & bottom padding to all .v-space selectors

  @if $include-extras{
    
    div.tab-panel,
    ul.accordion > li.acc-panel,
    .v-space{
      padding-top: $val;
      padding-bottom: $val;
    }

    div.tabs{ margin-bottom: $val; }

    div.tab-panel,
    ul.accordion > li.acc-panel:last-child{ padding-bottom: 0; }

    // Custom selectors
  }

  // If $include-extras:false we apply top & bottom padding to only the .v-space selector
  
  @else {
    .v-space{
      padding-top: $val;
      padding-bottom: $val;

    &.half{
      padding-top: $val/2;
      padding-bottom: $val/2;
    }
    }
  }

  // Apply bottom margin to specific selectors

  // Apply top margin to selectors

  .stack,
  .list-grid, 
  
  { margin-top: $val; }

  .stack{
    &.half{ margin-top: $val/2; }
  }
}

@mixin apply-horizontal-space($val, $include-extras:false){

  // Set $include-extras:true to apply left & right padding to tabs, accordions, and form elements
  
  // Apply left & right padding to all .h-space selectors
  
  @if $include-extras{

    // Tip: Use parent + child selectors to ensure left & right padding is not overwritten by our '%apply-rhythm-borders' placeholder mixin called in another file
    
    ul.tab-buttons li,
    ul.accordion.generic li.acc-button,
    ul.accordion.generic > li.acc-panel,
    ul.sub,
    div.tab-panel,
    form .btn,
    form .dd-menu,
    form button,
    form select,
    input[type="text"],
    input[type="email"],
    input[type="password"],
    form textarea,
    form label,
    li.error,
    div.ctct-form-errorMessage,
    .owl-theme .owl-controls,
    .h-space{
     padding-left: $val;
     padding-right: $val;
    }
  }

  // If $include-extras:false we apply left & right padding to only the .h-space selector
  
  @else {
    .h-space{
     padding-left: $val;
     padding-right: $val;
    }
  }

  // Apply left & right padding to the .list-grid selector
  // Note: We divide $val by 2 and apply it to the parent (<ul>) and child (<li>) 

  // .list-grid,
  // .list-grid li{
  //   padding-left:$val / 2;
  //   padding-right:$val / 2;
  // }
}

// We pass $pad-x into our @mixins - These are originally set in _base.scss and are a multiple of our $base-line-height

@include apply-horizontal-space($pad-medium);
@include apply-vertical-space($pad-large);


// Global Template Objects

#{$global-header}, 
#{$global-footer}, 
#wrap{ min-width: $site-min-width; }

.container-wide,
.container-narrow, 
#wrap
{ @extend %centered; }
 
.container-wide{
  max-width: $wide-width;
  // background-color: fade-out(blue, $amount);
  border: 12px solid fade-out(blue, $amount);
}

.container-narrow{
  max-width: $narrow-width;
  // background-color: fade-out(yellow, $amount);
}

#wrap{ max-width: $site-max-width; }

article {

  section{
    &:last-child,
    > *:last-child{
      margin-bottom: 0 !important;
    }
  }
}

div.two-across div, 
div.three-across div, 
div.four-across div,
div.six-across div{
  float: left;
  width: 100%;
}

// Add spacing bottom before floats

div.two-across > div, 
div.three-across div,
div.four-across div{

  @include trailer(2);

  &:last-child{ margin-bottom: 0; }
}

.list-grid.two-across, 
.list-grid.three-across
{
  > li { padding: $default-border-width / 2; }
}

.list-grid{
  font-size: 0;
  margin-top: -$default-border-width;

  > li{
    width: 100%;
    float: none;
    font-size: $base-font-size;
    vertical-align: top;
    display: inline-block;
    overflow: hidden;
  }

  > li > a{ display: block; }

  > li > a > span{
    position: absolute;
    right: $pad-tiny;
    bottom: $pad-tiny;
  }
}

// Breakpoints (max-width)

@include respond-to('device-large', max-width){}

@include respond-to('desktop-small', max-width){

  aside.v-space, 
  #content .wide-left-75 .short,
  #content .wide-right-75 .short
  { padding-top: 0; }

}

@include respond-to('desktop-medium', max-width){

  // Limit widths on mobile devices

  #end.two-across,
  // div.three-across, 
  div.four-across, 
  .container-narrow, 

  #global-links.wide-left .short

  {
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }

}

// Breakpoints (regular) 

@include respond-to('device-medium') {

  div.six-across > div:last-child > div{ margin-bottom: 0; }

} /* end device-medium (550) */  

@include respond-to('device-large') {

  .list-grid > li{ width: 50%; } 

} /* end device-large (700) */  

@include respond-to('desktop-small') {


} /* end desktop-small (850) */  

@include respond-to('desktop-medium') {

  div.two-across,
  div.four-across{
    > div { width: 50%; }
    > div,
    > div:first-child, { margin-bottom: 0; }
  }

  .v-align{
    display: flex;

    align-items: center;
    justify-content: center;

    &.reverse{
      flex-direction: row-reverse;
    }
  }
  

  div.three-across,
  div.six-across > div{
    > div { width:33.3333%; }
  }

  div.three-across,
  div.six-across{
    > div,
    > div:first-child,
    { margin-bottom: 0; }
  }

  .wide-left,
  .wide-right
  {
    > div { margin-bottom: 0; }
    .wide{ width: 70%; }
    .short{ width: 30%; }
  }

  .wide-left{
    .wide{ float: left; }
    .short{ float: right; }
  }

  .wide-right{
    .wide{ float: right; }
    .short{ float: left; }
  }

} /* end desktop-small (1000) */  

@include respond-to('desktop-large') {
  
  @include apply-horizontal-space($pad-large);

  div.four-across > div > div,
  div.six-across > div{
    width: 50%;
  }

  div.six-across,
  div.four-across{
    div,
    > div > div { margin-bottom: 0; }
  }

} /* end desktop-large (1200) */

@include respond-to('desktop-extra-large') {
  
  @include apply-horizontal-space($pad-extra-large);
  @include apply-vertical-space($pad-extra-large);

} /* end desktop-large (1450) */

// Custom list-grids

ul.list-grid, 
ul.centered-list{

  &.four-across{
    
    li{ width: 50%; }
    
    @include respond-to( 'desktop-small'){
      li{ width: 25%; }
    }
  }
}

ul.list-grid{
  
  &.three-across{
    
    @include respond-to( 'device-large'){
      li{ width: 33.3333%; }
    }
  }

  &.six-across{
    
    @include respond-to( 'device-medium'){
      li{ width: 50%; }
    }
    @include respond-to( 'device-large'){
      li{ width: 33.3333%; }
    }
    @include respond-to( 'desktop-extra-large'){
      li{ width: 16.6666%; }
    }
  }
}
